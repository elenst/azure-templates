########################################################################
# Collect, store and print test result info
########################################################################

parameters:
  condition: always()
  trial_id: $(Agent.jobName)

steps:
  - script: |
      result_summary_dir=$(Build.ArtifactStagingDirectory)/result_summary.$PAR_SUFFIX
      result_details_dir=$(Build.ArtifactStagingDirectory)/data.$PAR_SUFFIX
      mkdir -p $result_summary_dir
      mkdir -p $result_details_dir
      cp $ENV_LOGDIR/trial.log $ENV_RQG_HOME/rqg.info $ENV_BASEDIR/server.info $ENV_TOOLBOX_DIR/toolbox.info $result_summary_dir/
      cp `find $ENV_LOGDIR -name mysql*err* | xargs` $result_summary_dir/
      cp `find $ENV_LOGDIR -name mbackup*log* | xargs` $result_summary_dir/
      cp $ENV_LOGDIR/vardir/mysql.log $result_details_dir/
      for c in `find $ENV_LOGDIR -name core*` ; do
        echo "#################### $c ####################" >> $result_summary_dir/stacktraces
        echo "#################### $c ####################" >> $ENV_LOGDIR/threads
        echo "#################### $c ####################" >> $ENV_LOGDIR/threads_full
        binary=`gdb --batch --eval-command="bt" 1 $c 2>&1 | grep 'Core was generated by' | sed -e 's/^Core was generated by \`\([^ ]*\) .*/\1/'`
        echo $binary >> $result_summary_dir/stacktraces
        echo $binary >> $ENV_LOGDIR/threads
        echo $binary >> $ENV_LOGDIR/threads_full
        gdb --batch --eval-command="bt" $binary $c  | grep -v 'New LWP' >> $result_summary_dir/stacktraces
        gdb --batch --eval-command="thread apply all bt" $binary $c >> $result_details_dir/threads
        gdb --batch --eval-command="thread apply all bt full" $binary $c >> $result_details_dir/threads_full
      done
      mv $ENV_LOGDIR $result_details_dir/data-$(Build.BuildNumber)-$PAR_SUFFIX
      echo "####################################################################################################" >> $result_summary_dir/test_report
      echo "Test $PAR_SUFFIX" >> $result_summary_dir/test_report
      res=`grep 'exited with exit status' $result_summary_dir/trial.log | sed -e 's/.*exited with exit status STATUS_\([A-Z_]*\).*/\1/'`
      echo "Test result:" $res >> $result_summary_dir/test_report
      echo "PipelineId-BuildId:" $(System.DefinitionId)-$(Build.BuildId) >> $result_summary_dir/test_report
      echo "-------------------------------------" >> $result_summary_dir/test_report
      echo >> $result_summary_dir/test_report
      echo `cat $result_summary_dir/server.info` >> $result_summary_dir/test_report
      echo `cat $result_summary_dir/rqg.info` `cat $result_summary_dir/toolbox.info` >> $result_summary_dir/test_report
      echo >> $result_summary_dir/test_report
      grep -A 1 'Final command line' $result_summary_dir/trial.log >> $result_summary_dir/test_report
      echo >> $result_summary_dir/test_report
      perl $ENV_TOOLBOX_DIR/travis/check_for_known_bugs.pl $result_summary_dir/mysql*.err* $result_summary_dir/stacktraces $result_summary_dir/trial.log >> $result_summary_dir/test_report
      echo >> $result_summary_dir/test_report
      for f in $result_summary_dir/mysql*.err* ; do
        echo "========== $f ==========" >> $result_summary_dir/test_report
        cat $f | grep -v -f $ENV_TOOLBOX_DIR/travis/server_warnings.supp | grep -v "\[Note\]" | grep -v "^$" | cut -c 1-4096 >> $result_summary_dir/test_report
        echo >> $result_summary_dir/test_report
      done
      echo "####################################################################################################" >> $result_summary_dir/test_report
      cat $result_summary_dir/test_report
      cat $result_summary_dir/server.info >> $result_details_dir/repro.info
      echo $ENV_MYSQLD_OPTIONS >> $result_details_dir/repro.info
      if echo $ENV_RQG_OPTIONS | grep ps-protocol > /dev/null ; then
        echo "--ps-protocol" >> $result_details_dir/repro.info
      fi
    displayName: 'Test report'
    condition: ${{ parameters.condition }}
    env:
      PAR_SUFFIX: ${{ parameters.trial_id }}

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/result_summary.${{ parameters.trial_id }}
      artifactName: summary-${{ parameters.trial_id }}
    displayName: 'Store test result summary'
    condition: ${{ parameters.condition }}

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(Build.ArtifactStagingDirectory)/data.${{ parameters.trial_id }}
      includeRootFolder: true
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile:  $(Build.ArtifactStagingDirectory)/data-$(Build.BuildNumber)-${{ parameters.trial_id }}.tar.gz
    displayName: 'Archive test data'
    condition: ${{ parameters.condition }}

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/data.${{ parameters.trial_id }}
      artifactName: data-${{ parameters.trial_id }}
    displayName: 'Store test data'
    condition: ${{ parameters.condition }}
