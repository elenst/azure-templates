########################################################################
# Manually coalesce environment/default variables
# The variables are processed in the following way. For any option X,
# 1) Hard default values of X and extraX parameters are set here, they
#    can be overridden by the template call;
# 2) If option 'X' is defined in the environment, the value of 'X'
#    is assigned to it, regardless the value of the parameter;
# 3) The value of 'extraX', if set, is added at the end of 'X'
# 4) Values of 'cmakeBuildType' and 'cmakeWithASAN', if set, are added
#    at the end of 'cmakeOptions'
########################################################################

parameters:
  vmImage: 'Ubuntu 16.04'
  condition: succeeded()

  serverBranch: '10.4'
  serverRevision: ''
  rqgBranch: 'elenst-dev'
  toolboxBranch: 'master'

  cmakeBuildType: 'Debug'
  cmakeOptions: ''
  extraCmakeOptions: ''

  rqgOptions: ''
  extraRqgOptions: ''

  mysqldOptions: ''
  extraMysqldOptions: ''

  testDuration: 400
  testThreads: 6
  testViewsOpt: '--views'
  testVcolsOpt: ''
  testEngineOpt: ''
  testRedefines: ''
  
  onlyParam: 2
  optParam: 2

steps:
  - script: |
      echo "##vso[task.setvariable variable=serverBranch;isOutput=true]${SERVERBRANCH:-$PAR_SERVER_BRANCH}"
      echo "##vso[task.setvariable variable=serverRevision;isOutput=true]${SERVERREVISION:-$PAR_SERVER_REVISION}"
      echo "##vso[task.setvariable variable=rqgBranch;isOutput=true]${RQGBRANCH:-$PAR_RQG_BRANCH}"
      echo "##vso[task.setvariable variable=toolboxBranch;isOutput=true]${TOOLBOXBRANCH:-$PAR_TOOLBOX_BRANCH}"
      echo "##vso[task.setvariable variable=baseDir;isOutput=true]${BASEDIR:-$PAR_BASEDIR}"
      echo "##vso[task.setvariable variable=toolboxDir;isOutput=true]${TOOLBOXDIR:-$PAR_TOOLBOX_DIR}"
      echo "##vso[task.setvariable variable=rqgHome;isOutput=true]${RQGHOME:-$PAR_RQG_HOME}"
      echo "##vso[task.setvariable variable=logDIr;isOutput=true]${LOGDIR:-$PAR_LOGDIR}"
      extra_cmake_options=${EXTRACMAKEOPTIONS:-$PAR_EXTRA_CMAKE_OPTIONS}
      cmake_build_type=${CMAKEBUILDTYPE:-$PAR_CMAKE_BUILD_TYPE}
      if [ -n "$cmake_build_type" ] ; then
        extra_cmake_options="$extra_cmake_options -DCMAKE_BUILD_TYPE=$cmake_build_type"
      fi
      cmake_with_asan=${CMAKEWITHASAN:-$PAR_CMAKE_WITH_ASAN}
      if [ -n "$cmake_with_asan" ] ; then
        extra_cmake_options="$extra_cmake_options -DWITH_ASAN=$cmake_with_asan"
      fi
      echo "##vso[task.setvariable variable=cmakeOptions;isOutput=true]${CMAKEOPTIONS:-$PAR_CMAKE_OPTIONS} $extra_cmake_options"
      rqg_options=${RQGOPTIONS:-$PAR_RQG_OPTIONS} ${EXTRARQGOPTIONS:-$PAR_EXTRA_RQG_OPTIONS} ${TESTREDEFINES:-$PAR_TEST_REDEFINES}
      test_engine=${TESTENGINE:-$PAR_TEST_ENGINE}
      if [ -n "$test_engine" ] ; then
        rqg_options="$rqg_options --engine=$test_engine"
      fi
      test_duration=${TESTDURATION:-$PAR_TEST_DURATION}
      if [ -n "$test_duration" ] ; then
        rqg_options="$rqg_options --engine=$test_duration"
      fi
      test_threads=${TESTTHREADS:-$PAR_TEST_THREADS}
      if [ -n "$test_threads" ] ; then
        rqg_options="$rqg_options --engine=$test_threads"
      fi
      test_views=${TESTVIEWS:-$PAR_TEST_VIEWS}
      if [ "$test_views" == "true" ] ; then
        rqg_options="$rqg_options --views"
      elif [ "$test_views" == "false" ] ; then
        rqg_options=`echo $rqg_options | sed -e 's/--views=*[,a-zA-Z]*//g'`
      elif [ -n "$test_views" ] ; then
        rqg_options="$rqg_options --views=$test_views"
      fi
      test_vcols=${TESTVCOLS:-$PAR_TEST_VCOLS}
      if [ "$test_vcols" == "true" ] ; then
        rqg_options="$rqg_options --vcols"
      elif [ "$test_vcols" == "false" ] ; then
        rqg_options=`echo $rqg_options | sed -e 's/--vcols//g'`
      fi
      echo "##vso[task.setvariable variable=rqgOptions;isOutput=true]$rqg_options"
      echo "##vso[task.setvariable variable=mysqldOptions;isOutput=true]${MYSQLDOPTIONS:-$PAR_MYSQLD_OPTIONS} ${EXTRAMYSQLDOPTIONS:-$PAR_EXTRA_MYSQLD_OPTIONS}"
      
      echo "ONLYOPT: $ONLYOPT ONLYPARAM: $ONLYPARAM OPTPARAM: $OPTPARAM"
      echo "onlyOpt: $onlyOpt onlyParam: $onlyParam optParam: $optParam"
      echo "PAR_ONLYPARAM: $PAR_ONLYPARAM PAR_onlyParam: $PAR_onlyParam PAR2_ONLYPARAM: $PAR2_ONLYPARAM PAR2_onlyparam: $PAR2_onlyparam"

    name: env
    env:
      PAR_SERVER_BRANCH: ${{ parameters.serverBranch }}
      PAR_SERVER_REVISION: ${{ parameters.serverRevision }}
      PAR_RQG_BRANCH: ${{ parameters.rqgBranch }}
      PAR_TOOLBOX_BRANCH: ${{ parameters.toolboxBranch }}
      PAR_CMAKE_BUILD_TYPE: ${{ parameters.cmakeBuildType }}
      PAR_CMAKE_WITH_ASAN: ${{ parameters.cmakeWithASAN }}
      PAR_CMAKE_OPTIONS: ${{ parameters.cmakeOptions }}
      PAR_RQG_OPTIONS: ${{ parameters.rqgOptions }}
      PAR_MYSQLD_OPTIONS: ${{ parameters.mysqldOptions }}
      PAR_BASEDIR: ${{ parameters.baseDir }}
      PAR_TOOLBOX_DIR: ${{ parameters.toolboxDir }}
      PAR_RQG_HOME: ${{ parameters.rqgHome }}
      PAR_LOGDIR: ${{ parameters.logDir }}
      PAR_EXTRA_CMAKE_OPTIONS: ${{ parameters.extraCmakeOptions }}
      PAR_EXTRA_RQG_OPTIONS: ${{ parameters.extraRqgOptions }}
      PAR_EXTRA_MYSQLD_OPTIONS: ${{ parameters.extraMysqldOptions }}
      PAR_TEST_ENGINE: ${{ parameters.testEngine }}
      PAR_TEST_DURATION: ${{ parameters.testDuration }}
      PAR_TEST_THREADS: ${{ parameters.testThreads }}
      PAR_TEST_VIEWS: ${{ parameters.testViews }}
      PAR_TEST_VCOLS: ${{ parameters.testVcols }}
      PAR_TEST_REDEFINES: ${{ parameters.testRedefines }}
      PAR_ONLY_PARAM: ${{ parameters.onlyParam }}
      PAR_ONLY_OPT_PARAM: ${{ parameters.onlyOptParam }}
      PAR_ONLY_SCRIPT_PARAM: ${{ parameters.onlyScriptParam }}
      PAR_OPT_SCRIPT_PARAM: ${{ parameters.optScriptParam }}
      PAR_EMPTY_OPT: ${{ parameters.emptyOpt }}
      PAR_EMPTY_SCRIPT: ${{ parameters.emptyScript }}
      PAR_EMPTY_PARAM: ${{ parameters.emptyParam }}
      ${{ each pair in parameters }}:
        ${{ pair.key }}: ${{ pair.value }}
      ${{ each pair in parameters }}:
        PAR_${{ pair.key }}: ${{ pair.value }}
      PAR2_onlyparam: ${{ parameters.onlyparam }}
   
    condition: ${{ parameters.condition }}

  - script: printenv
    displayName: 'Print environment'
