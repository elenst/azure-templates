########################################################################
# GCOV report for MTR tests
########################################################################

trigger: none

# Expects SERVER_BRANCH in the environment

jobs:

#########
- job: Build
  pool:
    vmImage: 'Ubuntu 16.04'
  timeoutInMinutes: 0
  strategy:
    parallel: 1

  steps:

  - template: steps/env.yml

  - template: steps/install-deb-packages.yml
    parameters:
      INSTALLATION_SET: 'all'
      EXTRA_PACKAGES: 'lcov'

  - bash: |
      set -x
      if [ -z "$ENV_SERVER_BRANCH" ]; then
        echo "##vso[task.complete result=Failed]\"SERVER_BRANCH\" has not been specified"
      else
        filename=gcov-last-revno.$ENV_SERVER_BRANCH
        if [ -n "$BASELINE_REVISION" ]; then
          baseline_revno=$BASELINE_REVISION
          echo $baseline_revno > $filename
        elif wget $FTP_DOWNLOAD/$filename ; then
          baseline_revno=`cat $filename`
        fi
        if [ -z "$baseline_revno" ] ; then
          echo "##vso[task.complete result=Failed]Baseline revision has not been specified"
        else
          git clone $SERVER_REPO --branch=$ENV_SERVER_BRANCH $HOME/server
          cd $HOME/server
          current_revno=`git log -1 --abbrev=8 --pretty="%h"`
          echo "Baseline revision: $baseline_revno Current_revison: $current_revno"
          if [[ "$baseline_revno" =~ ^"$current_revno" ]] ; then
            echo "##vso[task.complete result=Skipped]Baseline revision is the same as current revision"
          else
            echo $baseline_revno > baseline.revision
          fi
        fi
      fi
    displayName: 'Prepare and clone'
    env:
      FTP_DOWNLOAD: 'ftp://perro.askmonty.org/public/azure'
      SERVER_REPO: 'https://github.com/MariaDB/server'
    name: prep

  # Build the server in-source
  - bash: |
      set -x
      cd $HOME/server
      cmake_options="$ENV_CMAKE_OPTIONS -DCMAKE_BUILD_TYPE=Debug -DENABLE_GCOV=ON -DPLUGIN_ROCKSDB=NO -DPLUGIN_SPHINX=NO -DPLUGIN_SPIDER=NO -DPLUGIN_MROONGA=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_CONNECT=NO -DPLUGIN_FEDERATED=NO -DWITH_MARIABACKUP=OFF"
      cmake . $cmake_options
      make -j5
      echo $ENV_SERVER_BRANCH `git log -1 --abbrev=8 --pretty="%h"` > $HOME/server/server.info
      echo $cmake_options >> $HOME/server/server.info
      cd ..
      rm -rf $BUILD_ARTIFACTSTAGINGDIRECTORY/*
      tar zcf $BUILD_ARTIFACTSTAGINGDIRECTORY/build.tar.gz server
    displayName: 'Build'
    name: build_server

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: build

#########
- job: MTR_normal
  pool:
    vmImage: 'Ubuntu 16.04'
  timeoutInMinutes: 0
  dependsOn:
  - 'Build'
  strategy:
    parallel: 1

  steps:

  - template: steps/env.yml

  - template: steps/install-deb-packages.yml
    parameters:
      INSTALLATION_SET: 'all'
      EXTRA_PACKAGES: 'lcov'

  - download: current
    artifact: build

  - bash: |
      cd $HOME
      tar zxf $PIPELINE_WORKSPACE/build/build.tar.gz
      cd $HOME/server/mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 main.1st
      cd $HOME
      rm $PIPELINE_WORKSPACE/build/build.tar.gz
      tar zcf $BUILD_ARTIFACTSTAGINGDIRECTORY/build.tar.gz server
    name: mtr_nm

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: build_nm

#########
- job: MTR_ps
  pool:
    vmImage: 'Ubuntu 16.04'
  timeoutInMinutes: 0
  dependsOn:
  - 'MTR_normal'
  strategy:
    parallel: 1

  steps:

  - template: steps/env.yml

  - template: steps/install-deb-packages.yml
    parameters:
      INSTALLATION_SET: 'all'
      EXTRA_PACKAGES: 'lcov'

  - download: current
    artifact: build_nm

  - bash: |
      cd $HOME
      tar zxf $PIPELINE_WORKSPACE/build_nm/build.tar.gz
      cd $HOME/server/mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --ps-protocol main.1st
      cd $HOME
      rm $PIPELINE_WORKSPACE/build_nm/build.tar.gz
      tar zcf $BUILD_ARTIFACTSTAGINGDIRECTORY/build.tar.gz server
    name: mtr_ps

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: build_ps

#########
- job: GCOV_report
  pool:
    vmImage: 'Ubuntu 16.04'
  timeoutInMinutes: 0
  strategy:
    parallel: 1
  dependsOn:
  - 'MTR_normal'
  - 'MTR_ps'

  steps:

  - template: steps/env.yml

  - template: steps/install-deb-packages.yml
    parameters:
      INSTALLATION_SET: 'all'
      EXTRA_PACKAGES: 'lcov'

  - download: current
    artifact: build_ps

  - bash: |
      set -x
      cd $HOME
      git clone https://github.com/elenst/mariadb-toolbox
      tar zxf $PIPELINE_WORKSPACE/build_ps/build.tar.gz
      cd server
      rm -rf $BUILD_ARTIFACTSTAGINGDIRECTORY/*
      infodir=$BUILD_ARTIFACTSTAGINGDIRECTORY/gcov_info
      mkdir $infodir
      baseline_revno=`cat baseline.revision`
      git diff $baseline_revno > $infodir/gcov.diff
      lcov --rc lcov_branch_coverage=1 --quiet --directory $HOME/server --capture --output-file $infodir/lcov.info
      perl $HOME/mariadb-toolbox/scripts/coverage_for_patch.pl --basedir=$HOME/server --diff-file=$infodir/gcov.diff --lcov-info=$infodir/lcov.info --branch-info 1>$infodir/coverage 2>$infodir/missings
      echo "#################"
      echo "Missing coverage:"
      echo "#################"
      cat $infodir/missings
    name: gcov_report

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: gcov_info
    name: publish_gcov_info

  - bash: |
      rm -rf $BUILD_ARTIFACTSTAGINGDIRECTORY/*
      mv $HOME/server/baseline.revision $BUILD_ARTIFACTSTAGINGDIRECTORY/gcov_baseline_revision_$SERVER_BRANCH
    name: store_baseline

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: gcov_baseline_revision
    displayName: 'Publish baseline'

#########
# Upload to FTP
- template: jobs/upload-to-ftp.yml
  parameters:
    name: 'Upload_new_baseline_to_FTP'
    artifactName: gcov_baseline_revision
    dependencies:
    - 'GCOV_report'
    condition: succeeded()
