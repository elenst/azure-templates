########################################################################
# Collect failure info
########################################################################

parameters:
  condition: always()

steps:
  - script: |
      result_summary_dir=$(Build.ArtifactStagingDirectory)/result_summary.$(Agent.jobName)
      result_details_dir=$(Build.ArtifactStagingDirectory)/logs.$(Agent.jobName)
      mkdir $result_summary_dir
      mkdir $result_details_dir
      cp $(env.logDir)/trial.log $result_summary_dir/
      cp $(env.logDir)/versions $result_summary_dir/
      cp `find $(env.logDir) -name mysql*err* | xargs` $result_summary_dir/ || true
      cp `find $(env.logDir) -name mbackup*log* | xargs` $result_summary_dir/
      cp $(env.logDir)/vardir/mysql.log $result_details_dir/
      for c in `find $(env.logDir) -name core*` ; do \
        echo "#################### $c ####################" >> $result_summary_dir/stacktraces ; \
        echo "#################### $c ####################" >> $(env.logDir)/threads ; \
        echo "#################### $c ####################" >> $(env.logDir)/threads_full ; \
        binary=`gdb --batch --eval-command="bt" 1 $c 2>&1 | grep 'Core was generated by' | sed -e 's/^Core was generated by \`\([^ ]*\) .*/\1/'` ; \
        echo $binary >> $result_summary_dir/stacktraces ; \
        echo $binary >> $(env.logDir)/threads ; \
        echo $binary >> $(env.logDir)/threads_full ; \
        gdb --batch --eval-command="bt" $binary $c  | grep -v 'New LWP' >> $result_summary_dir/stacktraces ; \
        gdb --batch --eval-command="thread apply all bt" $binary $c >> $(env.logDir)/threads ; \
        gdb --batch --eval-command="thread apply all bt full" $binary $c >> $(env.logDir)/threads_full; \
      done
      mv $(LOGDIR) $result_details_dir/data-$(Build.BuildNumber)-$(Agent.jobName)
    displayName: 'Collect failure info'
    condition: ${{ parameters.condition }}
